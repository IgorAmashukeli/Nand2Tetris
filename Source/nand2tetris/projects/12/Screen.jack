// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean white, black, color;
    static int startScreen, startKeyboard;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let white = false;
        let black = true;
        let startScreen = 16384;
        let startKeyboard = 24576;
        let color = white;
        do Screen.clearScreen();
        let color = black;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~32767;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = startScreen;
        while (i < startKeyboard) {
            do Memory.poke(i, white);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function int setBit(int value, int i) {
        if (color = black) {
            return value | twoToThe[i];
        } else {
            return value & (~twoToThe[i]);
        }
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, value;
        if ((x < 0) | (y < 0) | (x > 511) | (y > 255)) {
            do Sys.error(7);
        }
        // all the Screen memory is divided into 256 blocks
        // each block is one horizontal screen line
        // 8192 / 256 = 32 is the size of each block
        // to get y block start address, we do startScreen + 32 * y
        // each block of 32 size has 16-bit numbers
        // the line has 512 pixels
        // x pixel is in the x / 16 number, x % 16 bit
        let address = startScreen + (32 * y) + (x / 16);
        let bit = x - ((x / 16) * 16);

        //set pixel
        let value = Memory.peek(address);
        let value = Screen.setBit(value, bit);
        do Memory.poke(address, value);
        return;
    }


    function void drawHorizontal(int x1, int x2, int y) {
        var int cur;
        let cur = x1;
        while ((cur < x2) | (cur = x2)) {
            do Screen.drawPixel(cur, y);
            let cur = cur + 1;
        }
        return;
    }

    function void drawVertical(int x, int y1, int y2) {
        var int cur;
        let cur = y1;
        while ((cur < y2) | (cur = y2)) {
            do Screen.drawPixel(x, cur);
            let cur = cur + 1;
        }
        return;
    }

    function void drawLinePixel(int x1, int y1, int x2, int y2, int a, int b) {
        if ((x1 < x2) & (y1 < y2)) {
            do Screen.drawPixel(x1 + a, y1 + b);
        } else {
            if (x1 < x2) {
                do Screen.drawPixel(x1 + a, y1 - b);
            } else { 
                if (y1 < y2) {
                    do Screen.drawPixel(x1 - a, y1 + b);
                } else {
                    do Screen.drawPixel(x1 - a, y1 - b);
                }
            }
        }
        return;
    }

    function void drawDiagonal(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;
        let diff = 0;
        // b / a > dy / dx <=> b * dx > a * dy <=> a * dy - b * dx < 0
        // <=> diff = a * dy - b * dx < 0 <=> diff < 0
        // b / a > dy / dx => now a++; => diff < 0 => a++, else b++;
        // a++ => diff += dy; b++ => diff -= dx;
        while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
            do Screen.drawLinePixel(x1, y1, x2, y2, a, b);
            let diff = (a * dy) - (b * dx);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }


    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if ((x1 < 0) | (x2 < 0) | (y1 < 0) | (y2 < 0) | (x1 > 511) | (x2 > 511) | (y1 > 255) | (y2 > 255)) {
            do Sys.error(8);
        }
        // horizontal and vertical lines
        if (y1 = y2) {
            do Screen.drawHorizontal(Math.min(x1, x2), Math.max(x1, x2), y1);
        } else {
            if (x1 = x2) {
                do Screen.drawVertical(x1, Math.min(y1, y2), Math.max(y1, y2));
            } else {
                do Screen.drawDiagonal(x1, y1, x2, y2);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int min_y, max_y, cur_y;
        if ((x1 < 0) | (x2 < 0) | (y1 < 0) | (y2 < 0) | (x1 > 511) | (x2 > 511) | (y1 > 255) | (y2 > 255)) {
            do Sys.error(9);
        }
        let min_y = Math.min(y1, y2);
        let max_y = Math.max(y1, y2);
        let cur_y = min_y;
        while ((cur_y < max_y) | (cur_y = max_y)) {
            do Screen.drawHorizontal(Math.min(x1, x2), Math.max(x1, x2),cur_y);
            let cur_y = cur_y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        if ((x < 0) | (y < 0) | (x > 511) | (y > 255)) {
            do Sys.error(12);
        }
        if ((r < 0) | (r > 181)) {
            do Sys.error(13);
        }
        let dy = -r;
        while ((dy < r) | (dy = r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
