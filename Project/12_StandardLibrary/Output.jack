// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack

/**
 * A library of functions for writing text on the screen.
 * The Hack physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed 
 * within a frame which is 11 pixels high (including 1 pixel for inter-line 
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left 
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
 class Output {

    // Character map for displaying characters
    static Array charMaps;
    static int line_index;
    static int column_index;

    /** Initializes the screen, and locates the cursor at the screen's top-left. */
    function void init() {
        let line_index = 0;
        let column_index = 0;
        do Output.initMap();
        return;
    }

    // Initializes the character map array
    function void initMap() {
        var int i;
    
        let charMaps = Array.new(127);
        
        // Black square, used for displaying non-printable characters.
        do Output.create(0,63,63,63,63,63,63,63,63,63,0,0);

        // Assigns the bitmap for each character in the charachter set.
        // The first parameter is the character index, the next 11 numbers
        // are the values of each row in the frame that represents this character.

        do Output.create(32,0,0,0,0,0,0,0,0,0,0,0);          //
        do Output.create(33,12,30,30,30,12,12,0,12,12,0,0);  // !
        do Output.create(34,54,54,20,0,0,0,0,0,0,0,0);       // "
        do Output.create(35,0,18,18,63,18,18,63,18,18,0,0);  // #
        do Output.create(36,12,30,51,3,30,48,51,30,12,12,0); // $
        do Output.create(37,0,0,35,51,24,12,6,51,49,0,0);    // %
        do Output.create(38,12,30,30,12,54,27,27,27,54,0,0); // &
        do Output.create(39,12,12,6,0,0,0,0,0,0,0,0);        // '
        do Output.create(40,24,12,6,6,6,6,6,12,24,0,0);      // (
        do Output.create(41,6,12,24,24,24,24,24,12,6,0,0);   // )
        do Output.create(42,0,0,0,51,30,63,30,51,0,0,0);     // *
        do Output.create(43,0,0,0,12,12,63,12,12,0,0,0);     // +
        do Output.create(44,0,0,0,0,0,0,0,12,12,6,0);        // ,
        do Output.create(45,0,0,0,0,0,63,0,0,0,0,0);         // -
        do Output.create(46,0,0,0,0,0,0,0,12,12,0,0);        // .    
        do Output.create(47,0,0,32,48,24,12,6,3,1,0,0);      // /
        
        do Output.create(48,12,30,51,51,51,51,51,30,12,0,0); // 0
        do Output.create(49,12,14,15,12,12,12,12,12,63,0,0); // 1
        do Output.create(50,30,51,48,24,12,6,3,51,63,0,0);   // 2
        do Output.create(51,30,51,48,48,28,48,48,51,30,0,0); // 3
        do Output.create(52,16,24,28,26,25,63,24,24,60,0,0); // 4
        do Output.create(53,63,3,3,31,48,48,48,51,30,0,0);   // 5
        do Output.create(54,28,6,3,3,31,51,51,51,30,0,0);    // 6
        do Output.create(55,63,49,48,48,24,12,12,12,12,0,0); // 7
        do Output.create(56,30,51,51,51,30,51,51,51,30,0,0); // 8
        do Output.create(57,30,51,51,51,62,48,48,24,14,0,0); // 9
        
        do Output.create(58,0,0,12,12,0,0,12,12,0,0,0);      // :
        do Output.create(59,0,0,12,12,0,0,12,12,6,0,0);      // ;
        do Output.create(60,0,0,24,12,6,3,6,12,24,0,0);      // <
        do Output.create(61,0,0,0,63,0,0,63,0,0,0,0);        // =
        do Output.create(62,0,0,3,6,12,24,12,6,3,0,0);       // >
        do Output.create(64,30,51,51,59,59,59,27,3,30,0,0);  // @
        do Output.create(63,30,51,51,24,12,12,0,12,12,0,0);  // ?


        /**A (from the book):
        00110000 - the number is 1100 => 14
        01111000 - the number is 11110 => 30
        11001100 - the number is 110011 => 51
        11001100 - the number is 110011 => 51
        11111100 - the number is 111111 => 63
        11001100 - the number is 110011 => 51
        11001100 - the number is 110011 => 51
        11001100 - the number is 110011 => 51
        11001100 - the number is 110011 => 51
        00000000 - the number is 0 => 0
        00000000 - the number is 0 => 0
        **/

        do Output.create(65,14,30,51,51,63,51,51,51,51,0,0); // A ** TO BE FILLED **
        do Output.create(66,31,51,51,51,31,51,51,51,31,0,0); // B
        do Output.create(67,28,54,35,3,3,3,35,54,28,0,0);    // C
        do Output.create(68,15,27,51,51,51,51,51,27,15,0,0); // D
        do Output.create(69,63,51,35,11,15,11,35,51,63,0,0); // E
        do Output.create(70,63,51,35,11,15,11,3,3,3,0,0);    // F
        do Output.create(71,28,54,35,3,59,51,51,54,44,0,0);  // G
        do Output.create(72,51,51,51,51,63,51,51,51,51,0,0); // H
        do Output.create(73,30,12,12,12,12,12,12,12,30,0,0); // I
        do Output.create(74,60,24,24,24,24,24,27,27,14,0,0); // J
        do Output.create(75,51,51,51,27,15,27,51,51,51,0,0); // K
        do Output.create(76,3,3,3,3,3,3,35,51,63,0,0);       // L
        do Output.create(77,33,51,63,63,51,51,51,51,51,0,0); // M
        do Output.create(78,51,51,55,55,63,59,59,51,51,0,0); // N
        do Output.create(79,30,51,51,51,51,51,51,51,30,0,0); // O
        do Output.create(80,31,51,51,51,31,3,3,3,3,0,0);     // P
        do Output.create(81,30,51,51,51,51,51,63,59,30,48,0);// Q
        do Output.create(82,31,51,51,51,31,27,51,51,51,0,0); // R
        do Output.create(83,30,51,51,6,28,48,51,51,30,0,0);  // S
        do Output.create(84,63,63,45,12,12,12,12,12,30,0,0); // T
        do Output.create(85,51,51,51,51,51,51,51,51,30,0,0); // U
        do Output.create(86,51,51,51,51,51,30,30,12,12,0,0); // V
        do Output.create(87,51,51,51,51,51,63,63,63,18,0,0); // W
        do Output.create(88,51,51,30,30,12,30,30,51,51,0,0); // X
        do Output.create(89,51,51,51,51,30,12,12,12,30,0,0); // Y
        do Output.create(90,63,51,49,24,12,6,35,51,63,0,0);  // Z

        do Output.create(91,30,6,6,6,6,6,6,6,30,0,0);          // [
        do Output.create(92,0,0,1,3,6,12,24,48,32,0,0);        // \
        do Output.create(93,30,24,24,24,24,24,24,24,30,0,0);   // ]
        do Output.create(94,8,28,54,0,0,0,0,0,0,0,0);          // ^
        do Output.create(95,0,0,0,0,0,0,0,0,0,63,0);           // _
        do Output.create(96,6,12,24,0,0,0,0,0,0,0,0);          // `

        do Output.create(97,0,0,0,14,24,30,27,27,54,0,0);      // a
        do Output.create(98,3,3,3,15,27,51,51,51,30,0,0);      // b
        do Output.create(99,0,0,0,30,51,3,3,51,30,0,0);        // c
        do Output.create(100,48,48,48,60,54,51,51,51,30,0,0);  // d
        do Output.create(101,0,0,0,30,51,63,3,51,30,0,0);      // e
        do Output.create(102,28,54,38,6,15,6,6,6,15,0,0);      // f
        do Output.create(103,0,0,30,51,51,51,62,48,51,30,0);   // g
        do Output.create(104,3,3,3,27,55,51,51,51,51,0,0);     // h
        do Output.create(105,12,12,0,14,12,12,12,12,30,0,0);   // i
        do Output.create(106,48,48,0,56,48,48,48,48,51,30,0);  // j
        do Output.create(107,3,3,3,51,27,15,15,27,51,0,0);     // k
        do Output.create(108,14,12,12,12,12,12,12,12,30,0,0);  // l
        do Output.create(109,0,0,0,29,63,43,43,43,43,0,0);     // m
        do Output.create(110,0,0,0,29,51,51,51,51,51,0,0);     // n
        do Output.create(111,0,0,0,30,51,51,51,51,30,0,0);     // o
        do Output.create(112,0,0,0,30,51,51,51,31,3,3,0);      // p
        do Output.create(113,0,0,0,30,51,51,51,62,48,48,0);    // q
        do Output.create(114,0,0,0,29,55,51,3,3,7,0,0);        // r
        do Output.create(115,0,0,0,30,51,6,24,51,30,0,0);      // s
        do Output.create(116,4,6,6,15,6,6,6,54,28,0,0);        // t
        do Output.create(117,0,0,0,27,27,27,27,27,54,0,0);     // u
        do Output.create(118,0,0,0,51,51,51,51,30,12,0,0);     // v
        do Output.create(119,0,0,0,51,51,51,63,63,18,0,0);     // w
        do Output.create(120,0,0,0,51,30,12,12,30,51,0,0);     // x
        do Output.create(121,0,0,0,51,51,51,62,48,24,15,0);    // y
        do Output.create(122,0,0,0,63,27,12,6,51,63,0,0);      // z
        
        do Output.create(123,56,12,12,12,7,12,12,12,56,0,0);   // {
        do Output.create(124,12,12,12,12,12,12,12,12,12,0,0);  // |
        do Output.create(125,7,12,12,12,56,12,12,12,7,0,0);    // }
        do Output.create(126,38,45,25,0,0,0,0,0,0,0,0);        // ~

	    return;
    }

    // Creates the character map array of the given character index, using the given values.
    function void create(int index, int a, int b, int c, int d, int e,
                         int f, int g, int h, int i, int j, int k) {
	    var Array map;

        // array of this character map
        let map = Array.new(11);

        // put this array in two charMaps array
        let charMaps[index] = map;

        // fill charachter map array
        let map[0] = a;
        let map[1] = b;
        let map[2] = c;
        let map[3] = d;
        let map[4] = e;
        let map[5] = f;
        let map[6] = g;
        let map[7] = h;
        let map[8] = i;
        let map[9] = j;
        let map[10] = k;

        return;
    }
    
    // Returns the character map (array of size 11) of the given character.
    // If the given character is invalid or non-printable, returns the
    // character map of a black square.
    function Array getMap(char c) {
        if ((c < 32) | (c > 126)) {
            let c = 0;
        }
        return charMaps[c];
    }

    /**erase function: displays white square : 32**/
    function void erase() {
        do Screen.setColor(false);
        do Output.display(Output.getMap(32), 0);
        do Screen.setColor(true);
        return;
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
        if ((i < 0) | (j < 0) | (i > 22) | (j > 63)) {
            do Sys.error(20);
        }
        // put external line index to i
        let line_index = i;

        // put external column index to j
        let column_index = j;

        // erase the character
        do Output.erase();
        return;
    }

    function void displayLineInside(Array bitMap, int Line_index, int colorBit) {
        var int Column_index, value, pixel;
        var int x, y;

        // set internal column index to
        let Column_index = 0;

        // value to print in the line
        // the value should be printed from small bit to the large
        let value = bitMap[Line_index];

        // there are 8 columns
        while (Column_index < 8) {
            // pixel = value % 2
            let pixel = value - ((value / 2) * 2);

            // if pixel is 1, we can draw it
            if (pixel = colorBit) {

                // line is external_line_index * 11 + internal_line_index
                // column is external_column_index * 8 + internal_column_index
                let y = (line_index * 11) + Line_index;
                let x = (column_index * 8) + Column_index;
                do Screen.drawPixel(x, y);
            }
            // decrease value in half
            let value = value / 2;

            // shift intenal column index
            let Column_index = Column_index + 1;
        }
        return;
    }

    /**Displays the bitMap in 11 x 8 box**/
    function void display(Array bitMap, int colorBit) {
        var int Line_index;

        // internal line index
        let Line_index = 0;
        
        // iterate over lines inside bitMap
        while(Line_index < 11) {

            // display the line inside bitMap
            do Output.displayLineInside(bitMap, Line_index, colorBit);

            // shift internal line index
            let Line_index = Line_index + 1;
        }
        return;
    }

    function void shiftCursorRight() {
        // if there is a place to shift right
        if (column_index < 63) {
            // shift right
            do Output.moveCursor(line_index, column_index + 1);
        } else {
            // otherwise -> go to the next line
            do Output.println();
        }
        return;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
        var Array bitMap;

        // get actual bitMap;
        let bitMap = Output.getMap(c);

        // function to display the bitMap at the current cursor locations
        do Output.display(bitMap, 1);

        // shift cursor
        do Output.shiftCursorRight();
        return;
    }

    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
        var int cur;
        let cur = 0;
        // iterate over a string
        while (cur < s.length()) {

            // print char at position cur
            do Output.printChar(s.charAt(cur));

            // shift position
            let cur = cur + 1;
        }
        return;
    }


    function void fillDigitArray(Array digits, int value) {
        var int j, digit;

        // fill with zeroes at first
        let j = 0;
        while(j < 5) {
            let digits[j] = 0;
            let j = j + 1;
        }

        // last index to fill array from back to front is length - 1 = 4
        let j = 4;


        // find digits of value
        while (~(value = 0)) {
            // digit is value % 10
            let digit = value - ((value / 10) * 10);

            // save digit in digits Array
            let digits[j] = digit;

            // decrease the value 10 times to get to the next digit
            let value = value / 10;

            // shift j
            // can't become < 0, cause, there can't be > 5 digits (only 4 3 2 1 0)
            let j = j - 1;
        }
        return;
    }


    function int skipLeadingZeroes(Array digits) {
        // 5 - the maximum length of a int16 in decimal
        var int j;
        let j = 0;
        // while value is 0 -> shift the index
        while ((j < 5) & (digits[j] = 0)) {
            // shift the index
            let j = j + 1;
        }
        // first index of non-zero digit or 5
        return j;
    }

    function void printAbsoluteInt(Array digits, int startIndex) {
        // startIndex = 5 => all was skipped => value is zero
        // value is zero => print zero
        if (startIndex = 5) {
            // print zero
            do Output.printChar(48);
        } else {
            // starting index is not 5 => there is something to print
            while (startIndex < 5) {
                // print char (0 starts at 48)
                do Output.printChar(48 + digits[startIndex]);

                // shift starting index
                let startIndex = startIndex + 1;
            }
        }
        return;
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int i) {
        var int value, startIndex;
        var Array digits;

        // print minus
        if (i < 0) {
            do Output.printChar(45);
        }
        // absolute value to print
        let value = Math.abs(i);

        // array of digits to print (the biggest values are 5 character length)
        let digits = Array.new(5);

        // find digits
        do Output.fillDigitArray(digits, value);

        //skip leading zeroes
        let startIndex = Output.skipLeadingZeroes(digits);

        // print the absolute value of integer
        do Output.printAbsoluteInt(digits, startIndex);

        return;
    }

    /** Advances the cursor to the beginning of the next line. */
    function void println() {
        // if we can advance more:
        if (line_index < 22) {
            // shift to the start of the next line
            do Output.moveCursor(line_index + 1, 0);
        }
        // else: do nothing
        return;
    }

    /** Moves the cursor one column back. */
    function void backSpace() {
        // if there is a place to shift left:
        // shift left
        if (column_index > 0) {
            do Output.moveCursor(line_index, column_index - 1);
        } else {
            // if there is a place to shift up:
            // shift up to the last character in the previous row
            if (line_index > 0) {
                do Ouput.moveCursor(line_index - 1, 63);
            } else {
                // else we left the cursor where it was (erase the character)
                do Ouput.moveCursor(line_index, column_index);
            }
        }
        return;
    }
}