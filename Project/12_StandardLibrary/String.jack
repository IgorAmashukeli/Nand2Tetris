// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        if (maxLength = 0) {
            let maxLength = maxLength + 1;
        }
        let max_length = maxLength;
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j + 1 > length)) {
            do Sys.error(15);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j + 1 > length)) {
            do Sys.error(16);
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = max_length) {
            do Sys.error(17);
        }
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    function boolean isDigit(int d) {
        return ((d < 10) & (d > -1));
    }

    method boolean isMinus() {
        return (length > 0) & (str[0] = 45);
    }

    method int StringToInt(boolean isNegative) {
        var int val, d, i;
        // the value
        let val = 0;

        // the digit
        let d = 0;

        // the index starts at 0
        let i = 0;

        // if is negative, index starts at 1
        if (isNegative) {
            let i = 1;
        }

        // while isDigit (d >= 0 & d <= 9) and we don't hit the size of the string 
        while (String.isDigit(d) & (i < length)) {


            // the digit value
            let d = str[i] - 48;

            // sum up to the value
            let val = val * 10 + d;

            // shift index
            let i = i + 1;
        }
        return val;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var boolean isNegative;
        // boolean value: checks if negative
        let isNegative = false;

        // if the string first char is "-" and next is digit, it is negative value
        if (isMinus()) {
            // make the isNegative true
            let isNegative = true;
        }

        // get absolute value
        let val = StringToInt(isNegative);

        // if the value was negative, we change the sign of the value
        if (isNegative) {
            let val = -val;
        }

        return val;
    }

    // swap str[i] and str[j]
    method void swap(int i, int j) {
        var int temp;
        let temp = str[i];
        let str[i] = str[j];
        let str[j] = temp;
        return;
    }

    // reverse [left, right]
    method void reverse(int left, int right) {
        var int mid;

        // mid value
        let mid = left + ((right - left) / 2);
        
        // while left <= mid
        while((left < mid) | (left = mid)) {

            // swap values
            do swap(left, right);

            // shift left
            let left = left + 1;

            // shift right
            let right = right - 1;
        }
        return;
    }

    // calculate the digits, but in the wrong order
    method void convert(int val) {
        var int digit;
        while(~(val = 0)) {
            // digit = val % 10
            let digit = val - ((val / 10) * 10);

            // append the char to the string
            if (max_length < (length + 1)) {
                do Sys.error(19);
            }
            do appendChar(48 + digit);

            // modify value
            let val = val / 10;
        }
        return;
    }

    // convert non zero to String
    method void convertNonZero(int val) {
       var int left, right;

       //put minus if needed
       if (val < 0) {
           if (max_length = 0) {
              do Sys.error(19);
           }
           do appendChar(45);
       }

       // left index is 0
       let left = 0;

       // if val < 0 => left index is 1
       if (val < 0) {
           let left = 1;
       }

       //absolute value
       let val = Math.abs(val);

       // convert the value in reversed order
       do convert(val);

       // right index is length - 1
       let right = length - 1;

       // reverse back to original order
       do reverse(left, right);
       return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int digit;
        var int startRev;
        var int endRev;
        var int i;

        let length = 0;

        if (val = 0) {
            //convert 0
            if (max_length = 0) {
                do Sys.error(19);
            }
            do appendChar(48);
        } else {
            //convert nonzero
            do convertNonZero(val);
        }
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
