// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Zero(in=x, out=zero);

    ZN(in=x, zin=zx, nin=nx, out=xres);

    ZN(in=y, zin=zy, nin=ny, out=yres);

    Calculate(xres=xres, yres=yres, f=f, fres=fres, notfres=notfres);

    AluOutput(fres=fres, notfres=notfres, no=no, out=out, ng=ng, zr=zr);
}

// => shows complementary code for negative numbers

//x y zx nx zy ny f no output
//    0  0  0  0  0  0  x & y
//    0  0  0  0  0  1  !x | !y          (!(x & y))
//    0  0  0  0  1  0  x + y
//    0  0  0  0  1  1  - x - y - 1      (!(x + y) = 2^16 - 1 - x - y => - x - y - 1)
//    0  0  0  1  0  0  x & !y
//    0  0  0  1  0  1  !x | y           (!(x & !y)) 
//    0  0  0  1  1  0  x - y - 1        (x + !y = x + 2^16 - 1 - y => x - y - 1)
//    0  0  0  1  1  1  y - x            (!(x - y - 1) = 2^16 - 1 - x + y + 1 => y - x)
//    0  0  1  0  0  0  0                (x & 0 = 0)
//    0  0  1  0  0  1  1                (!0 = 1)
//    0  0  1  0  1  0  x                (x + 0 = x) 
//    0  0  1  0  1  1  !x               (!(x + 0) = !x)
//    0  0  1  1  0  0  x                (x & !0 = x)
//    0  0  1  1  0  1  !x               (!(x & !0) = !x)
//    0  0  1  1  1  0  x - 1            (x + 2^16 - 1 => x - 1)
//    0  0  1  1  1  1  -x               (!(x - 1) = 2^16 - 1 - x + 1 => -x)
//    0  1  0  0  0  0  !x & y           (!x & y)
//    0  1  0  0  0  1  x | !y           (!(!x & y) = x | !y)
//    0  1  0  0  1  0  y - x - 1        (!x + y = 2^16 - 1 - x + y => y - x - 1)
//    0  1  0  0  1  1  x - y            (!(y - x - 1) = 2^16 - 1 - y + x + 1 => x - y)
//    0  1  0  1  0  0  !x & !y          (!x & !y)
//    0  1  0  1  0  1  x | y            (!(!x & !y) = x | y)
//    0  1  0  1  1  0  - x - y - 2      (!x + !y = 2^16 - 1 - x + 2^16 - 1 - y => - x - y - 2)
//    0  1  0  1  1  1  x + y + 1        (!(- x - y - 2) = 2^16 - 1 + x + y + 2 => x + y + 1)
//    0  1  1  0  0  0  0                (!x & 0 = 0)
//    0  1  1  0  0  1  1                (!(!x & 0) = 1)
//    0  1  1  0  1  0  !x               (!x + 0 = !x)
//    0  1  1  0  1  1  x                (!(!x + 0) = x)
//    0  1  1  1  0  0  !x               (!x & !0 = !x)
//    0  1  1  1  0  1  x                (!(!x & !0) = x)
//    0  1  1  1  1  0  - x - 2          (!x + !0 = 2^16 - 1 - x + 2^16 - 1 => - x - 2)
//    0  1  1  1  1  1  x + 1            (!(!x + !0) = 2^16 - 1 + x + 2 => x + 1)
//    1  0  0  0  0  0  0                (0 & y = 0)
//    1  0  0  0  0  1  1                (!0 = 1)
//    1  0  0  0  1  0  y                (0 + y = y)
//    1  0  0  0  1  1  !y               (!y)
//    1  0  0  1  0  0  0                (0 & !y = 0)
//    1  0  0  1  0  1  1                (!0 = 1)
//    1  0  0  1  1  0  !y               (0 + !y = !y)
//    1  0  0  1  1  1  y                (!(0 + !y) = y)
//    1  0  1  0  0  0  0                (0 & 0 = 0)
//    1  0  1  0  0  1  1                (!(0 & 0) = 1)
//    1  0  1  0  1  0  0                (0 + 0 = 0)
//    1  0  1  0  1  1  1                (!(0 + 0) = 1)
//    1  0  1  1  0  0  0                (0 & !y = 0)
//    1  0  1  1  0  1  1                (!(0 & !y) = 1)
//    1  0  1  1  1  0  -1               (0 + 2^16 - 1 => -1)
//    1  0  1  1  1  1  0                (!(-1) = 2^16 - 1 + 1 => 0)
//    1  1  0  0  0  0  y                (!0 & y = y)
//    1  1  0  0  0  1  !y               (!(!0& y) = !y)
//    1  1  0  0  1  0  y - 1            (!0 + y = 2^16 - 1 + y => y - 1)
//    1  1  0  0  1  1  -y               (!(y - 1) = 2^16 - 1 - y + 1 => -y)
//    1  1  0  1  0  0  !y               (!0 & !y = !y)
//    1  1  0  1  0  1  y                (!(!0 & !y) = y)
//    1  1  0  1  1  0  -y - 2           (!0 + !y = 2^16 - 1 + 2^16 - y - 1 => - y - 2)
//    1  1  0  1  1  1  y + 1            (!(- y - 2) = 2^16 - 1 + y + 2 => y + 1)
//    1  1  1  0  0  0  0                (!0 & 0 = 0)
//    1  1  1  0  0  1  1                (!(!0 & 0) = 1)
//    1  1  1  0  1  0  -1               (!0 + 0 = !0 = 2^16 - 1 => -1)
//    1  1  1  0  1  1  0                (!(-1) = 2^16 - 1 + 1 => 0)
//    1  1  1  1  0  0  -1               (!0 & !0 = !0 = 2^16 - 1 => -1)
//    1  1  1  1  0  1  0                (!(-1) = 2^16 - 1 + 1 = 2^16 => 0)
//    1  1  1  1  1  0  -2               (!0 + !0 = 2^16 - 1 + 2^16 - 1 => -2)
//    1  1  1  1  1  1  1                (!(-2) = 2^16 - 1 + 2 => 1) 

//Main functions


//zx nx zy ny f  no       out
//1  0  1  0  1  0        0
//1  1  1  1  1  1        1
//1  1  1  0  1  0        -1
//0  0  1  1  0  0        x
//1  1  0  0  0  0        y
//0  0  1  1  0  1        !x
//1  1  0  0  0  1        !y
//0  0  1  1  1  1        -x
//1  1  0  0  1  1        -y
//0  1  1  1  1  1        x + 1
//1  1  0  1  1  1        y + 1
//0  0  1  1  1  0        x - 1
//1  1  0  0  1  0        y - 1
//0  0  0  0  1  0        x + y      
//0  1  0  0  1  1        x - y
//0  0  0  1  1  1        y - x
//0  0  0  0  0  0        x & y
//0  1  0  1  0  1        x | y



